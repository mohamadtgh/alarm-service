// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CogvisAI Alarms API
 *
 * API for managing alarms and visualizations from cogvisAI sensors.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"AuthLoginPost": Route{
			strings.ToUpper("Post"),
			"/auth/login",
			c.AuthLoginPost,
		},
		"AlarmsGet": Route{
			strings.ToUpper("Get"),
			"/alarms",
			c.AlarmsGet,
		},
		"AlarmsPost": Route{
			strings.ToUpper("Post"),
			"/alarms",
			c.AlarmsPost,
		},
		"AlarmsAlarmIdGet": Route{
			strings.ToUpper("Get"),
			"/alarms/{alarmId}",
			c.AlarmsAlarmIdGet,
		},
	}
}

// AuthLoginPost - Perform login and obtain token.
func (c *DefaultAPIController) AuthLoginPost(w http.ResponseWriter, r *http.Request) {
	var loginRequestParam LoginRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequestRequired(loginRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoginRequestConstraints(loginRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuthLoginPost(r.Context(), loginRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AlarmsGet - List alarms.
func (c *DefaultAPIController) AlarmsGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var sensorIdParam string
	if query.Has("sensorId") {
		param := query.Get("sensorId")

		sensorIdParam = param
	} else {
	}
	var type_Param string
	if query.Has("type") {
		param := query.Get("type")

		type_Param = param
	} else {
	}
	result, err := c.service.AlarmsGet(r.Context(), pageParam, pageSizeParam, sensorIdParam, type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AlarmsPost - Create alarm.
func (c *DefaultAPIController) AlarmsPost(w http.ResponseWriter, r *http.Request) {
	var alarmParam Alarm
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&alarmParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAlarmRequired(alarmParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAlarmConstraints(alarmParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AlarmsPost(r.Context(), alarmParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AlarmsAlarmIdGet - get a single alarm.
func (c *DefaultAPIController) AlarmsAlarmIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	alarmIdParam := params["alarmId"]
	if alarmIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"alarmId"}, nil)
		return
	}
	result, err := c.service.AlarmsAlarmIdGet(r.Context(), alarmIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
